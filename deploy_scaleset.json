{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "InstanceType": {
      "type": "string",
      "defaultValue": "Standard_F4",
      "allowedValues": [
		"Standard_F4s_v2",
 	 	"Standard_F4s",
		"Standard_F4"
      ],
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "fosversion": {
            "defaultValue": "6.0.3",
            "type": "String",
            "metadata": {
                "description": "FOS Version supported for auto-scaling."
            },
            "allowedValues": [
                "6.0.02",
                "6.0.3"
            ]
    },
    "vmssName": {
      "defaultValue": "dchao2vmss",
      "type": "string",
      "metadata": {
        "description": "Prefix name used as a base for naming resources."
      },
      "maxLength": 10
    },
    "subnetaddressPrefix": {
      "type": "string",
      "metadata": {
         "description": "Prefix of the subnet. Example 10.0.0.0/16"
      },
      "defaultValue": "10.0.0.0/16"
    },
    "PublicsubnetPrefix": {
      "type": "string",
      "metadata": {
         "description": "Prefix of the subnet1. Example 10.0.0.0/24.  Public Facing"
      },
      "defaultValue": "10.0.0.0/24"
    },
    "Privatesubnet2Prefix": {
      "type": "string",
      "metadata": {
         "description": "Prefix of the subnet2. Example 10.0.1.0/24.  Private Facing"
      },
      "defaultValue": "10.0.1.0/24"
    },
    "Privatesubnet3Prefix": {
      "type": "string",
      "metadata": {
         "description": "Prefix of the subnet3. Example 10.0.2.0/24.  Private Facing"
      },
      "defaultValue": "10.0.2.0/24"
    },
    "Privatesubnet4Prefix": {
      "type": "string",
      "metadata": {
         "description": "Prefix of the subnet3. Example 10.0.3.0/24.  Private Facing"
      },
      "defaultValue": "10.0.3.0/24"
    },
    "ByolInstanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM for BYOL VMSS"
      },
      "defaultValue": 1,
      "maxValue": 2
    },
    "PaygInstanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM for PAYG VMSS"
      },
      "defaultValue": 0
    },
    "MaxPaygInstanceCount": {
      "type": "int",
      "metadata": {
        "description": "Max Number of VM for PAYG VMSS"
      },
      "defaultValue": 6
    },
    "ScaleupThreshold": {
      "defaultValue": 80,
      "type": "Int",
      "metadata": {
         "description": "CPU usage percentage at which scaleup should occur"
      }
    },
    "ScaledownThreshold": {
      "defaultValue": 20,
      "type": "Int",
      "metadata": {
        "description": "CPU Usage percentage at which scaledown should occur"
      }
    },
    "EndPoints": {
        "defaultValue": "https://dchaofunc.azurewebsites.net/api/",
        "type": "String",
        "metadata": {
            "description": "Auto-Scale App service URL.  For example, https://fgt-app-serv.azurewebsites.net/api/"
        }
    },
    "adminUsername": {
      "defaultValue": "azureadmin",
      "type": "string",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    }
  },  
  "variables": {
    "namingInfix": "[resourceGroup().name]",
    "location": "[resourceGroup().location]",
    "addressPrefix": "[parameters('subnetaddressPrefix')]",
    "subnetPrefix": "[parameters('PublicsubnetPrefix')]",
    "subnet2Prefix": "[parameters('Privatesubnet2Prefix')]",
    "subnet3Prefix": "[parameters('Privatesubnet3Prefix')]",
    "subnet4Prefix": "[parameters('Privatesubnet4Prefix')]",
    "subnet2LoadBalancerIP" : "10.0.1.10",
    "lpVmssName": "[concat(parameters('vmssName'), 'byol')]",
    "regVmssName": "[concat(parameters('vmssName'), 'payg')]",
    "virtualNetworkName": "[concat(parameters('vmssName'), 'vnet')]",
    "publicIPAddressName": "[concat(parameters('vmssName'), 'pip')]",
    "subnetName": "[concat(parameters('vmssName'), 'subnet')]",
    "subnet2Name": "[concat(parameters('vmssName'), 'subnet2')]",
    "subnet3Name": "[concat(parameters('vmssName'), 'subnet3')]",
    "subnet4Name": "[concat(parameters('vmssName'), 'subnet4')]",
    "loadBalancerName": "[concat(parameters('vmssName'), 'extlb')]",
    "loadBalancer2Name": "[concat(parameters('vmssName'), 'intlb')]",
    "loadBalancer3Name": "[concat(parameters('vmssName'), 'dmzlb')]",
    "loadBalancer4Name": "[concat(parameters('vmssName'), 'mgmtlb')]",
    "networkSecurityGroupName": "[concat(parameters('vmssName'), 'nsg')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "lpNatPoolName": "[concat(parameters('vmssName'), 'lpnatpoolssh')]",
    "lpNatPoolNameHTTPS": "[concat(parameters('vmssName'), 'lpnatpoolhttps')]",
    "regNatPoolName": "[concat(parameters('vmssName'), 'regnatpoolssh')]",
    "regNatPoolNameHTTPS": "[concat(parameters('vmssName'), 'regnatpoolhttps')]",
    "bePoolName": "[concat(parameters('vmssName'), 'bepool')]",
    "intbePoolName": "[concat(parameters('vmssName'), 'intbepool')]",
    "dmzbePoolName": "[concat(parameters('vmssName'), 'dmzbepool')]",
    "mgmtbePoolName": "[concat(parameters('vmssName'), 'mgmtbepool')]",
    "lpnatStartPort": 50030,
    "lpnatEndPort": 50120,
    "lpnatStartPortHTTPS": 40030,
    "lpnatEndPortHTTPS": 40120,
    "regnatStartPort": 50000,
    "regnatEndPort": 50020,
    "regnatStartPortHTTPS": 40000,
    "regnatEndPortHTTPS": 40020,
    "natBackendPort": 22,
    "natBackendPortHTTPS": 8443,
    "lpNicName": "[concat(variables('lpVmssName'), 'nic')]",
    "lpNicNameint": "[concat(variables('lpVmssName'), 'nicint')]",
    "lpNicNamedmz": "[concat(variables('lpVmssName'), 'nicdmz')]",
    "lpNicNamemgmt": "[concat(variables('lpVmssName'), 'nicmgmt')]",
    "regNicName": "[concat(variables('regVmssName'), 'nic')]",
    "regNicNameint": "[concat(variables('regVmssName'), 'nicint')]",
    "regNicNamedmz": "[concat(variables('regVmssName'), 'nicdmz')]",
    "regNicNamemgmt": "[concat(variables('regVmssName'), 'nicmgmt')]",
    "ipConfigName": "[concat(parameters('vmssName'), 'ipconfig')]",
    "ipConfigintName": "[concat(parameters('vmssName'), 'ipconfigint')]",
    "ipConfigdmzName": "[concat(parameters('vmssName'), 'ipconfigdmz')]",
    "ipConfigmgmtName": "[concat(parameters('vmssName'), 'ipconfigmgmt')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "vnetID": "[resourceId(variables('namingInfix'),'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet2Name'))]",
    "subnet3Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet3Name'))]",
    "subnet4Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet4Name'))]",
    "routeTableName": "[concat(parameters('vmssName'),'-RouteTable')]",
    "routeTableId": "[resourceId('Microsoft.Network/routeTables',variables('routeTableName'))]",
    "osType": {
      "publisher": "Fortinet",
      "offer": "fortinet_fortigate-vm_v5",
      "sku": "fortinet_fg-vm_payg",
      "version": "[parameters('fosversion')]"
    },
    "osType2": {
      "publisher": "Fortinet",
      "offer": "fortinet_fortigate-vm_v5",
      "sku": "fortinet_fg-vm",
      "version": "[parameters('fosversion')]"
    },
    "imageReference": "[variables('osType')]",
    "imageReference2": "[variables('osType2')]",
    "LicenseEndPoints": "[concat(parameters('EndPoints'), 'byol-license')]",
    "PAYGEndPoints": "[concat(parameters('EndPoints'), 'fgt-asg-handler')]",
    "BYOLEndPoints": "[concat(parameters('EndPoints'), 'fgt-asg-handler')]",
    "userdata": "[concat('{\"config-url\": \"', variables('PAYGEndPoints'), '\"}\n')]",
    "userdata2": "[concat('{\"license-url\": \"', variables('LicenseEndPoints'), '\",\"config-url\": \"', variables('BYOLEndPoints'), '\"}\n')]",
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-04-01",
    "insightsApiVersion": "2015-04-01"
  },
  "resources": [
      {
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('routeTableName')]",
            "apiVersion": "2017-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "routes": [
                    {
                        "name": "toDefault",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIPAddress": "[variables('subnet2LoadBalancerIP')]"
                        }
                    }
                ]
            }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2017-10-01",
        "name": "[variables('networkSecurityGroupName')]",
        "location": "[variables('location')]",
        "properties": {
            "securityRules": [
		{
                  "name": "AllowAllInbound",
                  "properties": {
                    "description": "Allow all in",
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 100,
                    "direction": "Inbound"
                  }
                },
                {
                  "name": "AllowAllOutbound",
                  "properties": {
                    "description": "Allow all out",
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 105,
                    "direction": "Outbound"
                  }
              }
           ]
        }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-04-01",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
	"[variables('routeTableName')]"
      ],
      "properties": {
        "addressSpace":{ 
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          },
	  {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              },
	      "routeTable": {
                 "id": "[variables('routeTableId')]"
              }
            }
          },
          {
            "name": "[variables('subnet3Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet3Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              },
	      "routeTable": {
                 "id": "[variables('routeTableId')]"
              }
            }
          },
 	  {
            "name": "[variables('subnet4Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet4Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              },
	      "routeTable": {
                 "id": "[variables('routeTableId')]"
              }
            }
	  }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-08-01",
      "sku": {
          "name": "Standard"
      },
      "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
              "domainNameLabel": "[parameters('vmssName')]"
          }
      }  
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancer2Name')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-08-01",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerBackEnd",
            "properties": {
	            "privateIPAddress": "[variables('subnet2LoadBalancerIP')]",
                    "privateIPAllocationMethod": "Static",
                    "subnet": {
        	            "id": "[variables('subnet2Ref')]"
                    }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('intbePoolName')]"
          }
        ],
       "loadBalancingRules": [
          {
            "name": "intRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancer2Name')), '/frontendIPConfigurations/LoadBalancerBackEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancer2Name')), '/backendAddressPools/',variables('intbePoolName'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort":0,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancer2Name')), '/probes/tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 22,
              "intervalInSeconds": 5,
              "numberOfProbes": 3
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-08-01",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('lpNatPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('lpNatStartPort')]",
              "frontendPortRangeEnd": "[variables('lpNatEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          },
	  {
            "name": "[variables('lpNatPoolNameHTTPS')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('lpNatStartPortHTTPS')]",
              "frontendPortRangeEnd": "[variables('lpNatEndPortHTTPS')]",
              "backendPort": "[variables('natBackendPortHTTPS')]"
            }
          },
          {
            "name": "[variables('regNatPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('regNatStartPort')]",
              "frontendPortRangeEnd": "[variables('regNatEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          },
          {
            "name": "[variables('regNatPoolNameHTTPS')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('regNatStartPortHTTPS')]",
              "frontendPortRangeEnd": "[variables('regNatEndPortHTTPS')]",
              "backendPort": "[variables('natBackendPortHTTPS')]"
            }
          }                  
        ],
        "loadBalancingRules": [
          {
            "name": "httpRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/',variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort":80,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/tcpProbe')]"
              }
            }
          },
	  {
            "name": "httpsRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/',variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/tcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 22,
              "intervalInSeconds": 5,
              "numberOfProbes": 3
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('lpVmssName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-12-01",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancer2Name'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "plan": {
                "name": "fortinet_fg-vm",
                "publisher": "fortinet",
                "product": "fortinet_fortigate-vm_v5"
      },
      "sku": {
        "name": "[parameters('InstanceType')]",
        "tier": "Standard",
        "capacity": "[parameters('byolInstanceCount')]"
      },
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite"
            },
            "dataDisks": [
                {
                    "diskSizeGB": "30",
                    "lun": 1,
                    "createOption": "Empty"
                }
	    ],
            "imageReference": "[variables('imageReference2')]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('lpvmssName')]",
            "adminUsername": "[parameters('adminUsername')]",
	    "customData": "[base64(variables('userdata2'))]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('lpNicName')]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('lpNatPoolName'))]"
                          },
			  {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('lpNatPoolNameHTTPS'))]"
                          }

                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "[variables('lpNicNameint')]",
                "properties": {
                  "primary": "false",
                  "enableIPForwarding": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigintName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnet2Name'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancer2Name'), '/backendAddressPools/', variables('intbePoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
	      {
                "name": "[variables('lpNicNamedmz')]",
                "properties": {
                  "primary": "false",
                  "enableIPForwarding": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigdmzName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnet3Name'))]"
                        }
                       }
                    }
                  ]
                }
              },
	      {
                "name": "[variables('lpNicNamemgmt')]",
                "properties": {
                  "primary": "false",
                  "enableIPForwarding": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigmgmtName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnet4Name'))]"
                        }
                       }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    },
   {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "autoscaleBYOLhost",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('lpVmssName'))]"
      ],
      "properties": {
        "name": "autoscaleBYOLhost",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('lpVmssName'))]",
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "[parameters('byolInstanceCount')]",
              "maximum": "[parameters('byolInstanceCount')]",
              "default": "[parameters('byolInstanceCount')]"
            },
            "rules": [
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "autoscaleLPhost",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('lpVmssName'))]"
      ],
      "properties": {
        "name": "autoscaleLPhost",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('regVmssName'))]",
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "0",
              "maximum": "[parameters('MaxPaygInstanceCount')]",
              "default": "[parameters('paygInstanceCount')]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('lpVmssName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('ScaleupThreshold')]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('regVmssName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[parameters('ScaleupThreshold')]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('lpVmssName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('ScaledownThreshold')]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('regVmssName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[parameters('ScaledownThreshold')]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('regVmssName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-12-01",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancer2Name'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "plan": {
                "name": "fortinet_fg-vm_payg",
                "publisher": "fortinet",
                "product": "fortinet_fortigate-vm_v5"
      },
      "sku": {
        "name": "[parameters('InstanceType')]",
        "tier": "Standard",
        "capacity": "[parameters('paygInstanceCount')]"
      },
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite"
            },
            "dataDisks": [
                {
                    "diskSizeGB": "30",
                    "lun": 1,
                    "createOption": "Empty"
                }
	    ],
            "imageReference": "[variables('imageReference')]"
          },
          "priority": "Low",
          "evictionPolicy": "delete",
          "osProfile": {
            "computerNamePrefix": "[variables('regVmssName')]",
            "customData": "[base64(variables('userdata'))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('regNicName')]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('regNatPoolName'))]"
                          },
			  {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('regNatPoolNameHTTPS'))]"
                          }

                        ]
                      }
                    }
                  ]
                }
              },
	      {
                "name": "[variables('regNicNameint')]",
                "properties": {
                  "primary": "false",
                  "enableIPForwarding": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigintName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnet2Name'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancer2Name'), '/backendAddressPools/', variables('intbePoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
		"name": "[variables('regNicNamedmz')]",
		"properties": {
                  "primary": "false",
                  "enableIPForwarding": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigdmzName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnet3Name'))]"
                        }
                      }
                    }
                  ]
                }
	      },
	      {
		"name": "[variables('regNicNamemgmt')]",
		"properties": {
                  "primary": "false",
                  "enableIPForwarding": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigmgmtName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnet4Name'))]"
                        }
                      }
                    }
                  ]
                }
	      }
            ]
          }
        }
      }
    }
  ]
}
